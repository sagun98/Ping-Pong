#Hi! This is a very trivial form of the classic game Ping Pong which I created in Codeskulptor during my free time in summer 2015. 
The code below follows the Python format and can be executed in www.codeskluptor.org

#-------------------------------------------------------------------------------------------------------------------------------------------
# Implementation of classic arcade game Pong
import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0, 0]
Py1 = [HEIGHT/2 - PAD_HEIGHT/2, HEIGHT/2 - PAD_HEIGHT/2, HEIGHT/2 + PAD_HEIGHT/2, HEIGHT/2 + PAD_HEIGHT/2]
Py2 = [HEIGHT/2 - PAD_HEIGHT/2, HEIGHT/2 - PAD_HEIGHT/2, HEIGHT/2 + PAD_HEIGHT/2, HEIGHT/2 + PAD_HEIGHT/2]
paddle1_pos = [[0, Py1[0]],[8, Py1[1]], [8, Py1[2]], [0, Py1[3]]]
paddle2_pos = [[WIDTH-PAD_WIDTH, Py2[0]], [WIDTH,Py2[1]], [WIDTH,Py2[2]] , [WIDTH-PAD_WIDTH,Py2[3]]]
paddle1_vel = [0, 0]
paddle2_vel = [0, 0]
a =0
b =0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2, HEIGHT/2]
    
    if direction == "RIGHT":
        ball_vel[0] = random.randrange(3,4)
        ball_vel[1] = -random.randrange(3,4)
    elif direction == "LEFT":
        ball_vel[0] = -random.randrange(3,4)
        ball_vel[1] = -random.randrange(3,4)

    
# define event handlers
def button_handler():
    global a, b, ball_vel
    sound.rewind()
    sound.play()
    new_game()
    a = 0
    b = 0
    
    
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    x = random.choice([0,1])
     
    if x == 1:
        direction = "RIGHT"
    else:
        direction = "LEFT"
        
    spawn_ball(direction)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, Py1, Py2, a, b
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    if ball_pos[0] <= BALL_RADIUS:
        ball_vel[0] = -ball_vel[0]
    elif ball_pos[0] >= (WIDTH - 1) - BALL_RADIUS:
        ball_vel[0] = -ball_vel[0]
    elif ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] >= (HEIGHT -1) - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "Black", "White")
        
    # update paddle's vertical position, keep paddle on the screen
    if (Py2[3] + paddle2_vel[1] < HEIGHT) and (Py2[0] + paddle2_vel[1] >= PAD_HEIGHT/2 - 40):
        Py2[0] += paddle2_vel[1]
        Py2[1] += paddle2_vel[1]
        Py2[2] += paddle2_vel[1]
        Py2[3] += paddle2_vel[1]       
    
    paddle2_pos = [[WIDTH-PAD_WIDTH, Py2[0]], [WIDTH,Py2[1]], [WIDTH,Py2[2]] , [WIDTH-PAD_WIDTH,Py2[3]]]
      
    if (Py1[3] + paddle1_vel[1] < HEIGHT) and (Py1[0] + paddle1_vel[1] >= PAD_HEIGHT/2 - 40):   
        Py1[0] += paddle1_vel[1]
        Py1[1] += paddle1_vel[1]
        Py1[2] += paddle1_vel[1]
        Py1[3] += paddle1_vel[1]
        
    paddle1_pos = [[0, Py1[0]],[8, Py1[1]], [8, Py1[2]], [0, Py1[3]]]
    
    # draw paddles
    canvas.draw_polygon(paddle1_pos, 1, "White", "White")
    canvas.draw_polygon(paddle2_pos, 1, "White", "White")
    
    # determine whether paddle and ball collide    

    
    x =ball_pos[0] - BALL_RADIUS
    y =ball_pos[0] + BALL_RADIUS
    
    if (x <= PAD_WIDTH):
        if (ball_pos[1] >= Py1[1]) and (ball_pos[1] <= Py1[2]):
            ball_vel[1] += 0.01 * ball_vel[1]
            ball_vel[0] += 0.01 * ball_vel[0]
        
        else:
            spawn_ball("RIGHT")
            a +=1
       
    if (y >= (WIDTH - 1) - PAD_WIDTH): 
        if (ball_pos[1] >= Py2[1]) and (ball_pos[1] <= Py2[2]):
            ball_vel[1] += 0.01 * ball_vel[1]
            ball_vel[0] += 0.01 * ball_vel[0]
    
        else:
            spawn_ball("LEFT")
            b +=1
         
    # draw score
    canvas.draw_text(str(b), (200, 100), 40, "White")
    canvas.draw_text(str(a), (400, 100), 40, "White") 
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 2
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= acc
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] += acc
    else:
        paddle2_vel[1] += 0
       
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] -= acc
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] += acc
    
    
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    
    if key== simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = 0
        
    elif key== simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 0
        
    if key== simplegui.KEY_MAP["w"]:
        paddle1_vel[1] = 0
    elif key== simplegui.KEY_MAP["s"]:
        paddle1_vel[1] = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button = frame.add_button("Restart", button_handler, 100)
sound = simplegui.load_sound('http://commondatastorage.googleapis.com/codeskulptor-assets/Epoq-Lepidoptera.ogg')



# start frame
new_game()
frame.start()
sound.set_volume(0.7)
sound.play()

